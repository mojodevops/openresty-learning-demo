# 安装 openresty

https://openresty.org/en/installation.html

https://openresty.org/en/linux-packages.html

# 使用内置模块 ngx.upstream 启用禁用 upstream 后端，整个配置文件替换 openresty 的 nginx.conf 后重启可以试验效果。

# 查询 upstream
# curl -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' 'http://127.0.0.1:8088/upstreams'
# 禁用
# curl -v 'http://127.0.0.1:8088/upstream_control?action=disable&upstream=my_backend&server=127.0.0.1:11280'
# 启用
# curl -v 'http://127.0.0.1:8088/upstream_control?action=enable&upstream=my_backend&server=127.0.0.1:11280'

worker_processes  1;

events {
    worker_connections  1024;
}

error_log logs/error.log debug; # debug 级别的日志需要使用编译了 debug 模块的 nginx

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    # 分配共享内存，用于保存各后端节点的状态和权重
    lua_shared_dict upstream_config 1m;

    # 在 init 阶段初始化节点状态
    init_by_lua_block {
        local servers = {
            ["127.0.0.1:11280"] = { weight = 1, enabled = true },
            ["127.0.0.1:20001"] = { weight = 1, enabled = true }
        }
        local dict = ngx.shared.upstream_config
        for server, conf in pairs(servers) do
            dict:set(server .. "_weight", conf.weight)
            dict:set(server .. "_enabled", conf.enabled and 1 or 0)
        end
    }

    # 定义 upstream，必须配置静态列表以满足 nginx 启动检查
    upstream my_backend {
        server 127.0.0.1:11280;
        server 127.0.0.1:20001;
    }

    server {
        listen 8088;

        location / {
            proxy_pass http://my_backend;
        }

        location /hello {
            default_type text/plain;
            content_by_lua_block {
                ngx.say("path")
                ngx.say(package.path)
                ngx.say("cpath")
                ngx.say(package.cpath)
            }
        }

        location = /upstreams {
            default_type text/plain;
            content_by_lua_block {
                local concat = table.concat
                local ngx_upstream = require "ngx.upstream"
                local get_servers = ngx_upstream.get_servers
                local get_upstreams = ngx_upstream.get_upstreams
        
                local dict = ngx.shared.upstream_config  -- 共享内存存储 upstream 状态
                if not dict then
                    ngx.say("共享字典 upstream_config 未找到")
                    return
                end
        
                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("Upstream: ", u)
        
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("  无法获取 upstream 服务器信息: ", err)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            local server_key = srv.name  -- srv.name 通常是 "IP:PORT"
        
                            -- 获取共享字典中的状态
                            local enabled = dict:get(server_key .. "_enabled") or 1
                            local weight = dict:get(server_key .. "_weight") or srv.weight
        
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("  - ")
                                else
                                    ngx.print(", ")
                                end
        
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            -- 追加共享内存中的状态信息
                            ngx.print(", enabled = ", enabled == 1 and "yes" or "no", ", weight = ", weight, "\n")
                        end
                    end
                end
            }
        }

        location /upstream_control {
            content_by_lua_block {
                local dict = ngx.shared.upstream_config
                -- 获取共享字典
                local dict = ngx.shared.upstream_config
                if not dict then
                    ngx.status = 500
                    ngx.say(cjson.encode({ err = "共享字典 upstream_config 未找到" }))
                    return
                end

                local ngx_upstream = require "ngx.upstream"
                local get_servers = ngx_upstream.get_servers
                local get_upstreams = ngx_upstream.get_upstreams

                local cjson = require "cjson"
                local args = ngx.req.get_uri_args()
                local upstream = args["upstream"]
                local server = args["server"]
                local action = args["action"]
                
                if not upstream or not server then
                    ngx.status = 400
                    ngx.say(cjson.encode({ err = "缺少必要参数: upstream 或 server" }))
                    return
                end
                
                local is_backup = false  -- 假设所有服务器都是普通 upstream 服务器
                
                -- 获取 upstream 的所有服务器
                local servers = ngx_upstream.get_primary_peers(upstream)
                
                if not servers then
                    ngx.status = 500
                    ngx.say(cjson.encode({ err = "无法获取 upstream 服务器列表" }))
                    return
                end
                
                -- 查找 server 的索引
                local index = nil
                for i, peer in ipairs(servers) do
                    if peer.name == server then
                        index = i - 1  -- Lua 索引从 1 开始，但 `set_peer_down` 需要从 0 开始
                        break
                    end
                end
                
                if not index then
                    ngx.status = 400
                    ngx.say(cjson.encode({ err = "未找到服务器: " .. server }))
                    return
                end
                
                if action == "disable" then
                    local ok, err = ngx_upstream.set_peer_down(upstream, is_backup, index, true)
                    if not ok then
                        ngx.status = 500
                        ngx.say(cjson.encode({ err = "禁用失败: " .. (err or "未知错误") }))
                        return
                    end
                    dict:set(server .. "_enabled", 0)  -- 更新共享存储
                    ngx.say(cjson.encode({ msg = "服务器 " .. server .. " 已禁用" }))
                
                elseif action == "enable" then
                    local ok, err = ngx_upstream.set_peer_down(upstream, is_backup, index, false)
                    if not ok then
                        ngx.status = 500
                        ngx.say(cjson.encode({ err = "启用失败: " .. (err or "未知错误") }))
                        return
                    end
                    dict:set(server .. "_enabled", 1)  -- 更新共享存储
                    ngx.say(cjson.encode({ msg = "服务器 " .. server .. " 已启用" }))
                end
            }
        }











    } # end server

} # end http

